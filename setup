#!/bin/bash
BASE_DIR=$(dirname "${0}")
FILES_DIR="${BASE_DIR}/files"
LIB_DIR="${BASE_DIR}/lib"
SCRIPT=$(basename ${0})
POSTGRES_SUPPORTED_VERS="9.1 9.2 9.3 9.4 9.5 9.6"
SUPPORTED_DISTROS="centos6 ubuntu12.04"

source "${LIB_DIR}/messages"

help() {
  echo ""
  echo "Script to provision PostgreSQL 9.x inside jails"
  echo ""
  echo "Syntax: "
  echo ""
  echo "${SCRIPT} -v <POSTGRESQL_VERSIONS> -d <DISTRIBUTION> -a <32|64> [-f]"
  echo ""
  echo "Where: "
  echo "  -v <POSTGRESQL_VERSIONS> Comma separated list of versions (available: $(echo ${POSTGRES_SUPPORTED_VERS}|sed -e 's/ /, /g')"
  echo "  -d <DISTRIBUTION>        Target distribution (available: $(echo ${SUPPORTED_DISTROS}|sed -e 's/ /, /g'))"
  echo "  -a <32|64>               Architecture: 32 (i386) or 64 (amd64/x86_64)"
  echo "  -f                       Force recreation if any of the jails exist"
  echo ""
  exit 1
}

# Parse options
while getopts "v:d:a:fh" OPTS; do
  case "${OPTS}" in
    v) export VERSIONS="${OPTARG}" ;;
    d) DISTRO="${OPTARG}" ;;
    a) ARCHITECTURE="${OPTARG}" ;;
    f) FORCE="TRUE" ;;
    h) help ;;
    *) print_error_invalid_syntax
       exit 1 ;;
  esac
done
shift $((OPTIND-1))

if [ ${UID} -ne 0 ]; then
  print_error_run_as_root
  exit 1
fi

if [ -z ${VERSIONS} ] || [ -z ${ARCHITECTURE} ] || [ -z ${DISTRO} ]; then
  print_error_invalid_syntax
  exit 1
elif [ "${ARCHITECTURE}" != "32" ] && [ "${ARCHITECTURE}" != "64" ]; then
  print_error_invalid_syntax
  exit 1
fi

case ${DISTRO} in
  ubuntu12.04) if [ "${ARCHITECTURE}" == "64" ]; then
                 export ARCHITECTURE="amd64"
               elif [ "${ARCHITECTURE}" == "32" ]; then
                 export ARCHITECTURE="i386"
               fi
               USERNAME="ubuntu"
               GROUPNAME="ubuntu";;
  centos6)     if [ "${ARCHITECTURE}" == "64" ]; then
                 export ARCHITECTURE="x86_64"
                 export ARCHITECTURE2="x86_64"
               elif [ "${ARCHITECTURE}" == "32" ]; then
                 export ARCHITECTURE="i386"
                 # Used for the RPM Package (which is different from the repo arch)
                 export ARCHITECTURE2="i686"
               fi
               USERNAME="centos"
               GROUPNAME="centos";;
  *) print_error_unknown_distribution "Unknown distribution"
     exit 1;;
esac
export USERID="$(id -u ${USERNAME})"
if [ $? -ne 0 ]; then
  print_user_not_found "${USERNAME}"
  exit 1
fi
export GROUPID="$(id -g ${GROUPNAME})"
if [ $? -ne 0 ]; then
  print_group_not_found "${GROUPNAME}"
  exit 1
fi
export HOMEDIR=$(getent passwd "${USERNAME}" | cut -d: -f6 )

source "${LIB_DIR}/${DISTRO}"

print_special "========================================================================================================="
print_special "                                   Initial setup for ${DISTRO}"
print_special "========================================================================================================="
initial_setup
for VERSION in $(echo ${VERSIONS}|tr ',' ' '); do
  export SHORTDOTVER="${VERSION}"
  export SHORTVER="$(echo ${SHORTDOTVER}|tr -d '.')"
  export CHROOTDIR="/opt/chroot/${DISTRO}/postgres${SHORTVER}"
  export PORT="543$(echo ${SHORTDOTVER}|cut -d'.' -f2)"
  if [ -d ${CHROOTDIR} ]; then
    if [ "${FORCE}" == "TRUE" ]; then
      print_special "========================================================================================================="
      print_special "                              Deleting chroot jail for PostgreSQL ${SHORTDOTVER}"
      print_special "========================================================================================================="
      remove_chroot
    else
      print_error_jail_exists_no_force "${CHROOTDIR}"
      exit 1
    fi
  fi
  print_special "========================================================================================================="
  print_special "                              Creating chroot jail for PostgreSQL ${SHORTDOTVER}"
  print_special "========================================================================================================="
  create_chroot
  print_ok_jail_created "${SHORTDOTVER}"
done
print_ok_all_jails_created
